function [vse_lastne, normvse_lastne, spacing]= GSE_fanaliza(n, st_ponovitev)    

    vse_lastne = zeros(2*n, st_ponovitev); % matrix of all eigenvalues (size of matrix is not n anymore so we can't set the dimension)
    normvse_lastne = zeros(2*n, st_ponovitev); % lamda/sqrt(n)
    spacing = zeros(2*n-1,st_ponovitev); % normalized spacings
    mean_spacing = zeros(1, st_ponovitev);
    
    for k = 1 : st_ponovitev

        %% generating of a random GSE matrix
        A = randn(n) + 1i*randn(n);
        B = randn(n) + 1i*randn(n);
        M = [A B; -conj(B) conj(A)]; 
        M = (M + M')/2; 

        %% calculation of eigenvalues
        lastne = sort(unique(eig(M)));
        for l = 1 : 2*n
            vse_lastne(l,k) = lastne(l);
%             normvse_lastne(l,k) = lastne(l)/sqrt(n);
        end
        
    end
    
%% calculation of spacing i.e. (lamda(n+1)-lambda(n))
    for j = 1:st_ponovitev
       for i = 1:2*n-1
           spacing(i,j) = vse_lastne(i+1,j)-vse_lastne(i,j);
       end
         mean_spacing(j) = mean(spacing(:,j));
         spacing(:,j) = spacing(:,j)./mean_spacing(j) ;
    end        
        
        
        
        
        %% calculation of eigenvalues
%         vse_lastne = [vse_lastne ; sort(unique(eig(M)))];
%     end
%     spacing = zeros(1,length(vse_lastne));
% %     mean_spacing = [];
%        for i = 1:length(vse_lastne)-1
%            s = vse_lastne(i+1)-vse_lastne(i);
%            if s >= 0
%                spacing(i) = s;
%            else
% %                mean_spacing = [mean_spacing ; mean(spacing(1:i))];
%                spacing(1:i) = spacing(1:i)./mean(spacing(1:i));
%            end
%        end
end

    